// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ProtonMail/export-tool/internal/apiclient (interfaces: Builder,Client,RetryStrategy)
//
// Generated by this command:
//
//	mockgen -self_package github.com/ProtonMail/export-tool/internal/apiclient -package apiclient github.com/ProtonMail/export-tool/internal/apiclient Builder,Client,RetryStrategy
//

// Package apiclient is a generated GoMock package.
package apiclient

import (
	context "context"
	io "io"
	reflect "reflect"

	proton "github.com/ProtonMail/go-proton-api"
	crypto "github.com/ProtonMail/gopenpgp/v2/crypto"
	gomock "go.uber.org/mock/gomock"
)

// MockBuilder is a mock of Builder interface.
type MockBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockBuilderMockRecorder
	isgomock struct{}
}

// MockBuilderMockRecorder is the mock recorder for MockBuilder.
type MockBuilderMockRecorder struct {
	mock *MockBuilder
}

// NewMockBuilder creates a new mock instance.
func NewMockBuilder(ctrl *gomock.Controller) *MockBuilder {
	mock := &MockBuilder{ctrl: ctrl}
	mock.recorder = &MockBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBuilder) EXPECT() *MockBuilderMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockBuilder) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockBuilderMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockBuilder)(nil).Close))
}

// NewClient mocks base method.
func (m *MockBuilder) NewClient(ctx context.Context, username string, password []byte, hvToken *proton.APIHVDetails) (Client, proton.Auth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewClient", ctx, username, password, hvToken)
	ret0, _ := ret[0].(Client)
	ret1, _ := ret[1].(proton.Auth)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// NewClient indicates an expected call of NewClient.
func (mr *MockBuilderMockRecorder) NewClient(ctx, username, password, hvToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewClient", reflect.TypeOf((*MockBuilder)(nil).NewClient), ctx, username, password, hvToken)
}

// SendUnauthTelemetry mocks base method.
func (m *MockBuilder) SendUnauthTelemetry(ctx context.Context, telemetryData proton.SendStatsReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendUnauthTelemetry", ctx, telemetryData)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendUnauthTelemetry indicates an expected call of SendUnauthTelemetry.
func (mr *MockBuilderMockRecorder) SendUnauthTelemetry(ctx, telemetryData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendUnauthTelemetry", reflect.TypeOf((*MockBuilder)(nil).SendUnauthTelemetry), ctx, telemetryData)
}

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Auth2FA mocks base method.
func (m *MockClient) Auth2FA(ctx context.Context, req proton.Auth2FAReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Auth2FA", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// Auth2FA indicates an expected call of Auth2FA.
func (mr *MockClientMockRecorder) Auth2FA(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Auth2FA", reflect.TypeOf((*MockClient)(nil).Auth2FA), ctx, req)
}

// AuthDelete mocks base method.
func (m *MockClient) AuthDelete(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthDelete", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// AuthDelete indicates an expected call of AuthDelete.
func (mr *MockClientMockRecorder) AuthDelete(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthDelete", reflect.TypeOf((*MockClient)(nil).AuthDelete), ctx)
}

// Close mocks base method.
func (m *MockClient) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClient)(nil).Close))
}

// CreateLabel mocks base method.
func (m *MockClient) CreateLabel(ctx context.Context, req proton.CreateLabelReq) (proton.Label, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLabel", ctx, req)
	ret0, _ := ret[0].(proton.Label)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLabel indicates an expected call of CreateLabel.
func (mr *MockClientMockRecorder) CreateLabel(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLabel", reflect.TypeOf((*MockClient)(nil).CreateLabel), ctx, req)
}

// GetAddresses mocks base method.
func (m *MockClient) GetAddresses(ctx context.Context) ([]proton.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddresses", ctx)
	ret0, _ := ret[0].([]proton.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddresses indicates an expected call of GetAddresses.
func (mr *MockClientMockRecorder) GetAddresses(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddresses", reflect.TypeOf((*MockClient)(nil).GetAddresses), ctx)
}

// GetAttachmentInto mocks base method.
func (m *MockClient) GetAttachmentInto(ctx context.Context, attachmentID string, reader io.ReaderFrom) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttachmentInto", ctx, attachmentID, reader)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetAttachmentInto indicates an expected call of GetAttachmentInto.
func (mr *MockClientMockRecorder) GetAttachmentInto(ctx, attachmentID, reader any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttachmentInto", reflect.TypeOf((*MockClient)(nil).GetAttachmentInto), ctx, attachmentID, reader)
}

// GetGroupedMessageCount mocks base method.
func (m *MockClient) GetGroupedMessageCount(ctx context.Context) ([]proton.MessageGroupCount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupedMessageCount", ctx)
	ret0, _ := ret[0].([]proton.MessageGroupCount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupedMessageCount indicates an expected call of GetGroupedMessageCount.
func (mr *MockClientMockRecorder) GetGroupedMessageCount(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupedMessageCount", reflect.TypeOf((*MockClient)(nil).GetGroupedMessageCount), ctx)
}

// GetLabels mocks base method.
func (m *MockClient) GetLabels(ctx context.Context, labelTypes ...proton.LabelType) ([]proton.Label, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range labelTypes {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLabels", varargs...)
	ret0, _ := ret[0].([]proton.Label)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLabels indicates an expected call of GetLabels.
func (mr *MockClientMockRecorder) GetLabels(ctx any, labelTypes ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, labelTypes...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLabels", reflect.TypeOf((*MockClient)(nil).GetLabels), varargs...)
}

// GetMessage mocks base method.
func (m *MockClient) GetMessage(ctx context.Context, messageID string) (proton.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessage", ctx, messageID)
	ret0, _ := ret[0].(proton.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessage indicates an expected call of GetMessage.
func (mr *MockClientMockRecorder) GetMessage(ctx, messageID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessage", reflect.TypeOf((*MockClient)(nil).GetMessage), ctx, messageID)
}

// GetMessageMetadataPage mocks base method.
func (m *MockClient) GetMessageMetadataPage(ctx context.Context, page, pageSize int, filter proton.MessageFilter) ([]proton.MessageMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageMetadataPage", ctx, page, pageSize, filter)
	ret0, _ := ret[0].([]proton.MessageMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessageMetadataPage indicates an expected call of GetMessageMetadataPage.
func (mr *MockClientMockRecorder) GetMessageMetadataPage(ctx, page, pageSize, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageMetadataPage", reflect.TypeOf((*MockClient)(nil).GetMessageMetadataPage), ctx, page, pageSize, filter)
}

// GetOrganizationData mocks base method.
func (m *MockClient) GetOrganizationData(ctx context.Context) (proton.OrganizationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganizationData", ctx)
	ret0, _ := ret[0].(proton.OrganizationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganizationData indicates an expected call of GetOrganizationData.
func (mr *MockClientMockRecorder) GetOrganizationData(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizationData", reflect.TypeOf((*MockClient)(nil).GetOrganizationData), ctx)
}

// GetSalts mocks base method.
func (m *MockClient) GetSalts(ctx context.Context) (proton.Salts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSalts", ctx)
	ret0, _ := ret[0].(proton.Salts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSalts indicates an expected call of GetSalts.
func (mr *MockClientMockRecorder) GetSalts(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSalts", reflect.TypeOf((*MockClient)(nil).GetSalts), ctx)
}

// GetUserSettings mocks base method.
func (m *MockClient) GetUserSettings(ctx context.Context) (proton.UserSettings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserSettings", ctx)
	ret0, _ := ret[0].(proton.UserSettings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserSettings indicates an expected call of GetUserSettings.
func (mr *MockClientMockRecorder) GetUserSettings(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSettings", reflect.TypeOf((*MockClient)(nil).GetUserSettings), ctx)
}

// GetUserWithHV mocks base method.
func (m *MockClient) GetUserWithHV(ctx context.Context, hv *proton.APIHVDetails) (proton.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserWithHV", ctx, hv)
	ret0, _ := ret[0].(proton.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserWithHV indicates an expected call of GetUserWithHV.
func (mr *MockClientMockRecorder) GetUserWithHV(ctx, hv any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserWithHV", reflect.TypeOf((*MockClient)(nil).GetUserWithHV), ctx, hv)
}

// ImportMessages mocks base method.
func (m *MockClient) ImportMessages(ctx context.Context, addrKR *crypto.KeyRing, workers, buffer int, req ...proton.ImportReq) (proton.ImportResStream, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, addrKR, workers, buffer}
	for _, a := range req {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ImportMessages", varargs...)
	ret0, _ := ret[0].(proton.ImportResStream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportMessages indicates an expected call of ImportMessages.
func (mr *MockClientMockRecorder) ImportMessages(ctx, addrKR, workers, buffer any, req ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, addrKR, workers, buffer}, req...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportMessages", reflect.TypeOf((*MockClient)(nil).ImportMessages), varargs...)
}

// SendDataEvent mocks base method.
func (m *MockClient) SendDataEvent(ctx context.Context, req proton.SendStatsReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendDataEvent", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendDataEvent indicates an expected call of SendDataEvent.
func (mr *MockClientMockRecorder) SendDataEvent(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendDataEvent", reflect.TypeOf((*MockClient)(nil).SendDataEvent), ctx, req)
}

// MockRetryStrategy is a mock of RetryStrategy interface.
type MockRetryStrategy struct {
	ctrl     *gomock.Controller
	recorder *MockRetryStrategyMockRecorder
	isgomock struct{}
}

// MockRetryStrategyMockRecorder is the mock recorder for MockRetryStrategy.
type MockRetryStrategyMockRecorder struct {
	mock *MockRetryStrategy
}

// NewMockRetryStrategy creates a new mock instance.
func NewMockRetryStrategy(ctrl *gomock.Controller) *MockRetryStrategy {
	mock := &MockRetryStrategy{ctrl: ctrl}
	mock.recorder = &MockRetryStrategyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRetryStrategy) EXPECT() *MockRetryStrategyMockRecorder {
	return m.recorder
}

// HandleRetry mocks base method.
func (m *MockRetryStrategy) HandleRetry(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleRetry", ctx)
}

// HandleRetry indicates an expected call of HandleRetry.
func (mr *MockRetryStrategyMockRecorder) HandleRetry(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleRetry", reflect.TypeOf((*MockRetryStrategy)(nil).HandleRetry), ctx)
}
