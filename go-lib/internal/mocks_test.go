// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ProtonMail/export-tool/internal (interfaces: APIClientBuilder,APIClient)

// Package internal is a generated GoMock package.
package internal

import (
	context "context"
	reflect "reflect"

	proton "github.com/ProtonMail/go-proton-api"
	gomock "github.com/golang/mock/gomock"
)

// MockAPIClientBuilder is a mock of APIClientBuilder interface.
type MockAPIClientBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockAPIClientBuilderMockRecorder
}

// MockAPIClientBuilderMockRecorder is the mock recorder for MockAPIClientBuilder.
type MockAPIClientBuilderMockRecorder struct {
	mock *MockAPIClientBuilder
}

// NewMockAPIClientBuilder creates a new mock instance.
func NewMockAPIClientBuilder(ctrl *gomock.Controller) *MockAPIClientBuilder {
	mock := &MockAPIClientBuilder{ctrl: ctrl}
	mock.recorder = &MockAPIClientBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPIClientBuilder) EXPECT() *MockAPIClientBuilderMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockAPIClientBuilder) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockAPIClientBuilderMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockAPIClientBuilder)(nil).Close))
}

// NewClient mocks base method.
func (m *MockAPIClientBuilder) NewClient(arg0 context.Context, arg1 string, arg2 []byte) (APIClient, proton.Auth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewClient", arg0, arg1, arg2)
	ret0, _ := ret[0].(APIClient)
	ret1, _ := ret[1].(proton.Auth)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// NewClient indicates an expected call of NewClient.
func (mr *MockAPIClientBuilderMockRecorder) NewClient(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewClient", reflect.TypeOf((*MockAPIClientBuilder)(nil).NewClient), arg0, arg1, arg2)
}

// MockAPIClient is a mock of APIClient interface.
type MockAPIClient struct {
	ctrl     *gomock.Controller
	recorder *MockAPIClientMockRecorder
}

// MockAPIClientMockRecorder is the mock recorder for MockAPIClient.
type MockAPIClientMockRecorder struct {
	mock *MockAPIClient
}

// NewMockAPIClient creates a new mock instance.
func NewMockAPIClient(ctrl *gomock.Controller) *MockAPIClient {
	mock := &MockAPIClient{ctrl: ctrl}
	mock.recorder = &MockAPIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPIClient) EXPECT() *MockAPIClientMockRecorder {
	return m.recorder
}

// Auth2FA mocks base method.
func (m *MockAPIClient) Auth2FA(arg0 context.Context, arg1 proton.Auth2FAReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Auth2FA", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Auth2FA indicates an expected call of Auth2FA.
func (mr *MockAPIClientMockRecorder) Auth2FA(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Auth2FA", reflect.TypeOf((*MockAPIClient)(nil).Auth2FA), arg0, arg1)
}

// AuthDelete mocks base method.
func (m *MockAPIClient) AuthDelete(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthDelete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AuthDelete indicates an expected call of AuthDelete.
func (mr *MockAPIClientMockRecorder) AuthDelete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthDelete", reflect.TypeOf((*MockAPIClient)(nil).AuthDelete), arg0)
}

// Close mocks base method.
func (m *MockAPIClient) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockAPIClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockAPIClient)(nil).Close))
}
